from operator import ge
from aiogram import Dispatcher, types
from keyboards import keyboards_Client, keyboardDevice, addressInlineKeyboard
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from data_base import sqlite_db
import random
import pytesseract
import cv2
from aiogram.dispatcher.filters import Text
from aiogram import Bot 
from aiogram.dispatcher import Dispatcher
from test import TOKEN
from aiogram.contrib.fsm_storage.memory import MemoryStorage #–•—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ –û–ó–£

storage=MemoryStorage()
bot = Bot(token=TOKEN)
dp = Dispatcher(bot, storage=storage)

async def command_start(message: types.Message):
        await bot.send_message(message.from_user.id, f'–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, <strong>{message.from_user.first_name} {message.from_user.last_name}.\n\
</strong>–í–∞—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç <a href="https://cbmo.ru/">–ö–ì–£ –ú–û –¶–ë –ú–û</a>.\n\
–î–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π —Ä–∞–±–æ—Ç—ã –≤—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –í–∞—Å —Ä–∞–∑–¥–µ–ª', reply_markup=keyboards_Client, parse_mode='HTML')
        await message.delete()

async def adress_start(message: types.Message):
    photo = open('admin/contact/contact_org.png', 'rb')
    await bot.send_photo(chat_id=message.chat.id, photo=photo)

async def listWorker(message: types.Message):
    doc = open('admin/list/–¢–µ–ª–µ—Ñ–æ–Ω—ã —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤.pdf', 'rb')
    await message.reply_document(doc)



############################################################################################################################################################################################
#################                  callback   ######################################
async def list_menu(message: types.Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞ –º–µ–Ω—é –Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é —É—Å–ª—É–≥—É", reply_markup=addressInlineKeyboard)

async def photo_sent(message: types.Message):
    #show_alert=True - –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –Ω–∞ —ç–∫—Ä–∞–Ω–µ
    photo = open('admin/contact/contact_org.png', 'rb')
    await bot.send_photo(message.from_user.id,photo=photo)

async def doc_sent(message: types.Message):
    doc = open(('admin/list/–¢–µ–ª–µ—Ñ–æ–Ω—ã —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤') + '.pdf', 'rb')
    await bot.send_document(message.from_user.id, doc)






############################################################################################################################################################################################
#################                  –ï—Å–ª–∏ "–ü–æ–º–æ—â—å"  –û–ë–†–ê–ë–û–¢–ß–ò–ö –°–û–°–¢–û–Ø–ù–ò–ô    ######################################
class FSMAdmin(StatesGroup):
    nameDevice = State()    
    description = State() 
    photoInventar = State()
    contactUser = State() 
    numberAppeal = State()                          

async def cm_start(message: types.Message):
    await FSMAdmin.next()
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ, –∫–æ—Ç–æ—Ä–æ–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ—á–∏–Ω–∏—Ç—å', reply_markup=keyboardDevice)

async def nameDevice(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['id_user'] = message.from_user.id
        data['firstname'] = message.from_user.first_name
        data['lastname'] = message.from_user.last_name
        data['name_device'] = message.text
        await FSMAdmin.next()
        await message.answer('–û–ø–∏—à–∏—Ç–µ –∫—Ä–∞—Ç–∫–æ –ø—Ä–æ–±–ª–µ–º—É, –∫–æ—Ç–æ—Ä—É—é –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Ä–µ—à–∏—Ç—å')

async def description(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['description'] = message.text
        await FSMAdmin.next()
        await message.answer('–°—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—Ä—É–π—Ç–µ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–Ω—ã–π –Ω–æ–º–µ—Ä')

async def photoInventar(message: types.Message, state: FSMContext):
    async with state.proxy() as data:                            
        document_id = message.photo[0].file_id  # –ü–æ–ª—É—á–µ–Ω–∏–µ —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ id –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
        file_info = await bot.get_file(document_id)
        path_photo = f'img/{file_info.file_unique_id}.jpg'
        print(path_photo)
        await message.photo[-1].download(path_photo)
        
        image = cv2.imread(path_photo)

###########################################################################################################################################################################################
        pytesseract.pytesseract.tesseract_cmd = r'C:\Program Files\Tesseract-OCR\tesseract' #–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –£–ë–†–ê–¢–¨ –î–õ–Ø LINUX
###########################################################################################################################################################################################
        string = pytesseract.image_to_string (image, config = 'outputbase digits')
        getTextMain = string.split('\n')
        getText= [x for x in getTextMain if x]
        getUpdateText = getText.pop()  #–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –≤ —Å–ø–∏—Å–∫–µ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞ –î–ê/–ù–ï–¢ - –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞—Ç—å!!!
       
     
      
        # print(getText2.pop())

        
        

        keyboards = types.ReplyKeyboardMarkup(resize_keyboard=True) 
        buttons = ["–î–∞", "–ù–µ—Ç"]
        keyboards.add(*buttons)

        await message.answer('–ü–æ–¥—Å–∫–∞–∂–∏—Ç–µ, –≤–∞—à –∏–Ω–≤–µ–Ω—Ç–∞—Ä–Ω—ã–π –Ω–æ–º–µ—Ä = ' + getUpdateText + ' ?', reply_markup = keyboards)
        await FSMAdmin.next()

        data['photo_inventar'] = getUpdateText # –î–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –≤ –¥—Ä—É–≥—É—é —Ñ—É–Ω–∫—Ü–∏—é
        data['photo_puth'] = str(path_photo)
       

async def contactUser(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        if (message.text == "–î–∞"):
            getUpdateText = data['photo_inventar']
            data['photo_puth'] = '–°—á–∏—Ç–∞–ª —Å —Ñ–æ—Ç–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ'
        else:
            puth_fileUser = data['photo_puth']
            data['photo_puth'] = puth_fileUser
            data['photo_inventar'] = '–ù–µ —Å—á–∏—Ç–∞–ª —Å —Ñ–æ—Ç–æ'

        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        keyboard.add(types.KeyboardButton(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä üì±", request_contact=True))
        await message.answer("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏\n(–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ)", reply_markup=keyboard)
        await FSMAdmin.next()

async def numberAppeal(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
         data['contact_user'] = message.contact.phone_number
         number = str(random.randint(1, 1000000))
         data['appeal'] = number        
    await message.answer('–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ. –ù–æ–º–µ—Ä –≤–∞—à–µ–π –∑–∞—è–≤–∫–∏ = ' + data['appeal'],  reply_markup=keyboards_Client)
    await sqlite_db.sql_add_command(state)
    await state.finish()

############################################################################################################################################################################################

def register_handlers_callback(dp : Dispatcher):
    dp.register_message_handler(list_menu, commands="–î—Ä—É–≥–æ–µ")
    dp.register_callback_query_handler(photo_sent, Text(equals="address"))
    dp.register_callback_query_handler(doc_sent, Text(equals="numbers"))



def register_handlers_client(dp : Dispatcher):
    dp.register_message_handler(command_start, commands=['start', 'help'])
    dp.register_message_handler(cm_start, commands=['–ü–æ–¥–¥–µ—Ä–∂–∫–∞üìù', 'support'], state=None) 
    dp.register_message_handler(listWorker, commands=['phoneorg'])
    dp.register_message_handler(adress_start, commands=['contact'])
    dp.register_message_handler(list_menu, commands=['–ü–æ–¥—Ä–æ–±–Ω–µ–µüìã', 'other'])

    dp.register_message_handler(nameDevice, state = FSMAdmin.nameDevice)
    dp.register_message_handler(description, state = FSMAdmin.description)
    dp.register_message_handler(photoInventar, state = FSMAdmin.photoInventar, content_types='photo')
    dp.register_message_handler(contactUser, state = FSMAdmin.contactUser )
    dp.register_message_handler(numberAppeal, content_types=types.ContentType.CONTACT, state = FSMAdmin.numberAppeal)


    
